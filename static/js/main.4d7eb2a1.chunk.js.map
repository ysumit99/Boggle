{"version":3,"sources":["components/Random/Random.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["generateRandomLetters","boardSize","randomLetters","i","charAt","Math","floor","random","length","Board","props","state","size","className","id","type","name","value","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d7eb2a1.chunk.js","sourcesContent":["/**\n * \n * @param {*} boardSize \n */\nlet generateRandomLetters = (boardSize) => {\n\n\n    let randomLetters = '';\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n\n    for (let i = 0; i < boardSize * boardSize; i++) {\n        randomLetters += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return randomLetters;\n\n\n}\n\nexport { generateRandomLetters };","import React from 'react';\nimport './Board.css';\nimport { generateRandomLetters } from '../Random/Random';\n\n\nclass Board extends React.Component {\n\n\n    constructor(props) {\n\n        super(props);\n\n        /* This will be used to store Board state */\n        this.state = {\n            boardSize: this.props.size,\n            randomLetters: generateRandomLetters(5)\n        };\n\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container-fluid\" id=\"container\">\n\n                    <div className=\"row\">\n\n                        <div className=\"col-6\" id=\"board\">\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td><input type=\"button\" className=\"tile\" id=\"00\" name=\"00\" value={this.state.randomLetters[0]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"01\" name=\"01\" value={this.state.randomLetters[1]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"02\" name=\"02\" value={this.state.randomLetters[2]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"03\" name=\"03\" value={this.state.randomLetters[3]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"04\" name=\"04\" value={this.state.randomLetters[4]} /></td>\n                                    </tr>\n\n                                    <tr>\n                                        <td><input type=\"button\" className=\"tile\" id=\"10\" name=\"10\" value={this.state.randomLetters[5]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"11\" name=\"11\" value={this.state.randomLetters[6]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"12\" name=\"12\" value={this.state.randomLetters[7]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"13\" name=\"13\" value={this.state.randomLetters[8]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"14\" name=\"14\" value={this.state.randomLetters[9]} /></td>\n                                    </tr>\n\n                                    <tr>\n                                        <td><input type=\"button\" className=\"tile\" id=\"20\" name=\"20\" value={this.state.randomLetters[10]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"21\" name=\"21\" value={this.state.randomLetters[11]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"22\" name=\"22\" value={this.state.randomLetters[12]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"23\" name=\"23\" value={this.state.randomLetters[13]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"24\" name=\"24\" value={this.state.randomLetters[14]} /></td>\n                                    </tr>\n\n                                    <tr>\n                                        <td><input type=\"button\" className=\"tile\" id=\"30\" name=\"30\" value={this.state.randomLetters[15]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"31\" name=\"31\" value={this.state.randomLetters[16]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"32\" name=\"32\" value={this.state.randomLetters[17]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"33\" name=\"33\" value={this.state.randomLetters[18]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"34\" name=\"34\" value={this.state.randomLetters[19]} /></td>\n                                    </tr>\n\n                                    <tr>\n                                        <td><input type=\"button\" className=\"tile\" id=\"40\" name=\"40\" value={this.state.randomLetters[20]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"41\" name=\"41\" value={this.state.randomLetters[21]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"42\" name=\"42\" value={this.state.randomLetters[22]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"43\" name=\"43\" value={this.state.randomLetters[23]} /></td>\n                                        <td><input type=\"button\" className=\"tile\" id=\"44\" name=\"44\" value={this.state.randomLetters[24]} /></td>\n                                    </tr>\n\n\n                                </tbody>\n                            </table>\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n\n        );\n    }\n};\n\nexport default Board;","import React from 'react';\nimport Board from './components/Board/Board';\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    /*App State will be stored here */\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Board size={5} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}